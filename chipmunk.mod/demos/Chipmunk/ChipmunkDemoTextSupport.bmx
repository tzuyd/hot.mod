
Rem Copyright (c) 2007 Scott Lembcke
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
End Rem

SuperStrict

' Import necessary modules
Import brl.StandardIO
Import brl.Max2D
Import brl.retro
'Import brl.map
'Import brl.random
Import brl.Color

Import hot.chipmunk

Import "VeraMoBd.ttf_sdf.bmx"

Rem Copyright (c) 2007 Scott Lembcke
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
End Rem

' Define constants
'Const Scale:Float = 1.00
Const Scale:Float = 0.70
Const LineHeight:Float = 18.0 * Scale
' // Meh, just max out 16 bit index size.
Const VertexMax:Int = 64 * 1024
Const IndexMax:Int = 128 * 1024

' Define structures
Type Vertex
    Field Pos:CPVect
    Field uv:CPVect
    Field Color:scolor8
	
	Function Create:Vertex(Pos:CPVect, uv:CPVect, Color:scolor8)
		Local t:Vertex = New Vertex
		t.Pos = Pos
		t.uv = uv
		t.Color = Color
		Return t
	End Function
End Type

Type Uniforms
		Field U_vp_matrix:Float[16]
End Type

Rem
' Define global variables
Global Vertexes:Vertex[VertexMax]
Global Indexes:Short[IndexMax]
Global VertexCount:size_t = 0
Global IndexCount:size_t = 0
Global PushedVertexCount:size_t = 0
Global PushedIndexCount:size_t = 0
end rem

' // char -> glyph indexes generated by the lonesock tool.
Global glyph_indexes:Int[256]
Global ChipmunkDemoTextMatrix:CPTransform

' Define functions
Function PushVertexes:Vertex[] (vcount:size_t, index_src:Short[], icount:size_t)
Rem
    If VertexCount + vcount > VertexMax Or IndexCount + icount > IndexMax Then
        Assert "Geometry buffer full."
    EndIf
    
    Local vertex_dst:Vertex[] = Vertexes
    Local base:size_t = VertexCount
    VertexCount :+ vcount
    
    Local index_dst:Short[] = Indexes
    For Local i:Int = 0 Until icount
        index_dst[i] = index_src[i] + base
    Next
    IndexCount :+ icount
    
    Return vertex_dst
end rem
End Function

Function PushChar:Float(character:Int, x:Float, y:Float)
    Local i:Int = glyph_indexes[character]
    Local s:Float = Scale / scale_factor
	SetScale 1, 1
	SetColor $FD, $F6, $E3
	SetAlpha 1
    DrawText(Chr(character), x, y)

    Return Float(sdf_spacing[i * 8 + 7]) * s
End Function

Function ChipmunkDemoTextDrawString(Pos:CPVect, str:String)
    Local x:Float = Pos.x
    Local y:Float = -Pos.y
    
    For Local i:Int = 0 Until Len(str)
        Local character:Int = Asc(Mid(str, i + 1, 1))
        If character = Asc("~n")
            y:+LineHeight
            x = Pos.x
        Else
            x:+PushChar(character, x, y)
        EndIf
    Next
End Function
 
Function ChipmunkDemoTextInit()
Rem
    ' Initialize rendering buffers
    VertexCount = 0
    IndexCount = 0
    PushedVertexCount = 0
    PushedIndexCount = 0
    ChipmunkDemoTextMatrix = New CPTransform
end rem
    
    ' Fill in the glyph index array
    For Local i:Int = 0 Until sdf_num_chars
        Local char_index:Int = sdf_spacing[i * 8]
        glyph_indexes[char_index] = i
    Next
	
	SetImageFont LoadImageFont("incbin::VeraMoBd.ttf", Int(LineHeight), SMOOTHFONT)
End Function

Function ChipmunkDemoTextFlushRenderer()
Rem
    ' Apply transformations
    Local uniforms:uniforms = New uniforms
    uniforms[0] = ChipmunkDemoTextMatrix
    ApplyMatrix2D(ChipmunkDemoTextMatrix)
    
    ' Draw
    DrawImage(ImageGetTexture(0))
    
    ' Reset buffers
    VertexCount = 0
    IndexCount = 0
end rem
End Function

Function ChipmunkDemoTextClearRenderer()
Rem
    ' Clear buffers
    VertexCount = 0
    IndexCount = 0
end rem
End Function

Function ChipmunkDemoTextPushRenderer()
Rem
    ' Save current buffer counts
    PushedVertexCount = VertexCount
    PushedIndexCount = IndexCount
end rem
End Function

Function ChipmunkDemoTextPopRenderer()
Rem
    ' Restore buffer counts
    VertexCount = PushedVertexCount
    IndexCount = PushedIndexCount
end rem
End Function
